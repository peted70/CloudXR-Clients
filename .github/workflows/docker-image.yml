name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Fetch Release Metadata
      id: fetch_release
      run: |
        # Fetch the release metadata
        release_info=$(curl -H "Authorization: Bearer ${{ secrets.PAT }}" -H "Accept: application/vnd.github+json" https://api.github.com/repos/peted70/CloudXR-Clients/releases/latest)
        echo "$release_info" > release_info.json
        # Print the release info for debugging
        cat release_info.json
        # Extract the asset ID
        asset_id=$(echo "$release_info" | jq -r '.assets[] | select(.name == "CloudXR-SDK_4_0_0.zip") | .id')
        if [ -z "$asset_id" ]; then
          echo "Error: Asset ID could not be found or is null."
          exit 1
        fi
        echo "Asset ID: $asset_id"
        echo "ASSET_ID=$asset_id" >> $GITHUB_ENV

    - name: Download Release Asset
      run: |
        echo "Downloading asset with ID $ASSET_ID"
        curl -L -H "Accept: application/octet-stream" -H "Authorization: Bearer ${{ secrets.PAT }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/peted70/CloudXR-Clients/releases/assets/$ASSET_ID --output CloudXR-SDK_4_0_0.zip
        ls -lh CloudXR-SDK_4_0_0.zip
        file CloudXR-SDK_4_0_0.zip
        head -n 20 CloudXR-SDK_4_0_0.zip
      env:
        ASSET_ID: ${{ env.ASSET_ID }}
        
    # Check if the download was successful and verify the file size
    - name: Verify download
      run: |
        if [ ! -f "CloudXR-SDK_4_0_0.zip" ]; then 
          echo "Download failed"; 
          exit 1; 
        fi
        
        FILE_SIZE=$(stat -c%s "CloudXR-SDK_4_0_0.zip")
        
        if [ "$FILE_SIZE" -le 10000 ]; then 
          echo "Downloaded file is too small. Contents of the file:";
          cat CloudXR-SDK_4_0_0.zip;
          exit 1; 
        fi
        
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)
