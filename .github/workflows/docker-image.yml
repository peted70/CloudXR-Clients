name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4            
    - name: Build the Docker image
      run: docker build --build-arg GITHUB_SDK_TOKEN=${{ secrets.SDK_TOKEN }} --build-arg SDK_REPO=${{ vars.SDK_REPO }}  --build-arg SDK_REPO_OWNER=${{ vars.SDK_REPO_OWNER }} . --file Dockerfile --tag cloudxr-dev-env:latest
    # Run the command inside the Docker container to create the APK
    - name: Build APK
      run: docker run --name my-container -w /CloudXR-SDK/Client/Sample/Android/OculusVR cloudxr-dev-env:latest bash -c "./gradlew build"
    # Copy the APK file from the container to the host machine
    - name: Copy APK to host
      run: docker cp my-container:/CloudXR-SDK/Client/Sample/Android/OculusVR/app/build/outputs/apk/debug/app-debug.apk .
    - name: Copy Release APK to Host
      run: docker cp my-container:/CloudXR-SDK/Client/Sample/Android/OculusVR/app/build/outputs/apk/release/app-release.apk .

    # Upload the APK as an artifact
    # - name: Upload APK as Artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #       name: app-debug-apk
    #       path: app-debug.apk
    # - name: Upload Release APK as Artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #       name: app-release-apk
    #       path: app-release.apk

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}  # This uses the tag that triggered the workflow
        release_name: Release ${{ github.ref }}
        body: "Release of version ${{ github.ref }}"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
    - name: Upload Debug APK as Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app-debug.apk
        asset_name: app-debug.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload Release APK as Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app-release.apk
        asset_name: app-release.apk
        asset_content_type: application/vnd.android.package-archive          

        # Cleanup the container
    - name: Cleanup
      run: docker rm my-container


